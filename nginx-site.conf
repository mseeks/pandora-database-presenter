events {}

http {
  upstream database {
    postgres_server ${DB_HOST} dbname=${DB_NAME} user=${DB_USERNAME} password=${DB_PASSWORD};
  }

  server {
    listen 80 default_server;
    rds_json on;

    location /artists {
      postgres_pass database;
      postgres_query "SELECT DISTINCT artist_name as artist FROM likes";
    }

    location /artists/count {
      postgres_pass database;
      postgres_query "SELECT COUNT(DISTINCT artist_name) FROM likes";
    }

    location /tracks {
      postgres_pass database;
      postgres_query "
        select array_to_json(array_agg(row_to_json(tracks)))
        FROM (
          SELECT
            track_name as title,
            artist_name as artist,
            track_audio_features->'instrumentalness' as instrumentalness,
            track_audio_features->'acousticness' as acousticness,
            track_audio_features->'speechiness' as speechiness,
            track_audio_features->'loudness' as loudness,
            track_audio_features->'energy' as energy,
            track_audio_features->'danceability' as danceability,
            track_audio_features->'tempo' as tempo,
            track_audio_features->'valence' as valence,
            track_audio_features->'liveness' as liveness,
            track_audio_features->'duration_ms' as duration_ms,
            track_audio_features->'time_signature' as time_signature,
            track_audio_features->'key' as key,
            track_audio_features->'mode' as mode,
            track_information->'album'->'images'->0->'url' as image_url,
            track_information->'popularity' as popularity,
            track_information->'explicit' as explicit,
            track_information->'track_number' as track_number,
            track_information->'disc_number' as disc_number
          FROM likes
        ) tracks
      ";

      postgres_output text;
    }

    location /tracks/count {
      postgres_pass database;
      postgres_query "SELECT COUNT(*) FROM likes";
    }
  }
}
